(() => {
  "use strict";
  const t = {};
  function e() {
    if (location.hash) return location.hash.replace("#", "");
  }
  let s = (t, e = 500, s = 0) => {
      t.classList.contains("_slide") ||
        (t.classList.add("_slide"),
        (t.style.transitionProperty = "height, margin, padding"),
        (t.style.transitionDuration = e + "ms"),
        (t.style.height = `${t.offsetHeight}px`),
        t.offsetHeight,
        (t.style.overflow = "hidden"),
        (t.style.height = s ? `${s}px` : "0px"),
        (t.style.paddingTop = 0),
        (t.style.paddingBottom = 0),
        (t.style.marginTop = 0),
        (t.style.marginBottom = 0),
        window.setTimeout(() => {
          (t.hidden = !s),
            !s && t.style.removeProperty("height"),
            t.style.removeProperty("padding-top"),
            t.style.removeProperty("padding-bottom"),
            t.style.removeProperty("margin-top"),
            t.style.removeProperty("margin-bottom"),
            !s && t.style.removeProperty("overflow"),
            t.style.removeProperty("transition-duration"),
            t.style.removeProperty("transition-property"),
            t.classList.remove("_slide"),
            document.dispatchEvent(
              new CustomEvent("slideUpDone", { detail: { target: t } })
            );
        }, e));
    },
    o = (t, e = 500, s = 0) => {
      if (!t.classList.contains("_slide")) {
        t.classList.add("_slide"),
          (t.hidden = !t.hidden && null),
          s && t.style.removeProperty("height");
        let o = t.offsetHeight;
        (t.style.overflow = "hidden"),
          (t.style.height = s ? `${s}px` : "0px"),
          (t.style.paddingTop = 0),
          (t.style.paddingBottom = 0),
          (t.style.marginTop = 0),
          (t.style.marginBottom = 0),
          t.offsetHeight,
          (t.style.transitionProperty = "height, margin, padding"),
          (t.style.transitionDuration = e + "ms"),
          (t.style.height = o + "px"),
          t.style.removeProperty("padding-top"),
          t.style.removeProperty("padding-bottom"),
          t.style.removeProperty("margin-top"),
          t.style.removeProperty("margin-bottom"),
          window.setTimeout(() => {
            t.style.removeProperty("height"),
              t.style.removeProperty("overflow"),
              t.style.removeProperty("transition-duration"),
              t.style.removeProperty("transition-property"),
              t.classList.remove("_slide"),
              document.dispatchEvent(
                new CustomEvent("slideDownDone", { detail: { target: t } })
              );
          }, e);
      }
    },
    i = !0,
    a = (t = 500) => {
      if (i) {
        const e = document.querySelectorAll("[data-lp]");
        setTimeout(() => {
          e.forEach((t) => {
            t.style.paddingRight = "";
          }),
            (document.body.style.paddingRight = ""),
            document.documentElement.classList.remove("lock");
        }, t),
          (i = !1),
          setTimeout(function () {
            i = !0;
          }, t);
      }
    },
    n = (t = 500) => {
      if (i) {
        const e = document.querySelectorAll("[data-lp]"),
          s = window.innerWidth - document.body.offsetWidth + "px";
        e.forEach((t) => {
          t.style.paddingRight = s;
        }),
          (document.body.style.paddingRight = s),
          document.documentElement.classList.add("lock"),
          (i = !1),
          setTimeout(function () {
            i = !0;
          }, t);
      }
    };
  function r() {
    a(), document.documentElement.classList.remove("menu-open");
  }
  function l(t) {
    setTimeout(() => {
      window.FLS && console.log(t);
    }, 0);
  }
  function c(t) {
    return t.filter(function (t, e, s) {
      return s.indexOf(t) === e;
    });
  }
  function h(t, e) {
    const s = Array.from(t).filter(function (t, s, o) {
      if (t.dataset[e]) return t.dataset[e].split(",")[0];
    });
    if (s.length) {
      const t = [];
      s.forEach((s) => {
        const o = {},
          i = s.dataset[e].split(",");
        (o.value = i[0]),
          (o.type = i[1] ? i[1].trim() : "max"),
          (o.item = s),
          t.push(o);
      });
      let o = t.map(function (t) {
        return (
          "(" + t.type + "-width: " + t.value + "px)," + t.value + "," + t.type
        );
      });
      o = c(o);
      const i = [];
      if (o.length)
        return (
          o.forEach((e) => {
            const s = e.split(","),
              o = s[1],
              a = s[2],
              n = window.matchMedia(s[0]),
              r = t.filter(function (t) {
                if (t.value === o && t.type === a) return !0;
              });
            i.push({ itemsArray: r, matchMedia: n });
          }),
          i
        );
    }
  }
  t.popup = new (class {
    constructor(t) {
      let e = {
        logging: !0,
        init: !0,
        attributeOpenButton: "data-popup",
        attributeCloseButton: "data-close",
        fixElementSelector: "[data-lp]",
        youtubeAttribute: "data-popup-youtube",
        youtubePlaceAttribute: "data-popup-youtube-place",
        setAutoplayYoutube: !0,
        classes: {
          popup: "popup",
          popupContent: "popup__content",
          popupActive: "popup_show",
          bodyActive: "popup-show",
        },
        focusCatch: !0,
        closeEsc: !0,
        bodyLock: !0,
        hashSettings: { location: !0, goHash: !0 },
        on: {
          beforeOpen: function () {},
          afterOpen: function () {},
          beforeClose: function () {},
          afterClose: function () {},
        },
      };
      this.youTubeCode,
        (this.isOpen = !1),
        (this.targetOpen = { selector: !1, element: !1 }),
        (this.previousOpen = { selector: !1, element: !1 }),
        (this.lastClosed = { selector: !1, element: !1 }),
        (this._dataValue = !1),
        (this.hash = !1),
        (this._reopen = !1),
        (this._selectorOpen = !1),
        (this.lastFocusEl = !1),
        (this._focusEl = [
          "a[href]",
          'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',
          "button:not([disabled]):not([aria-hidden])",
          "select:not([disabled]):not([aria-hidden])",
          "textarea:not([disabled]):not([aria-hidden])",
          "area[href]",
          "iframe",
          "object",
          "embed",
          "[contenteditable]",
          '[tabindex]:not([tabindex^="-"])',
        ]),
        (this.options = {
          ...e,
          ...t,
          classes: { ...e.classes, ...t?.classes },
          hashSettings: { ...e.hashSettings, ...t?.hashSettings },
          on: { ...e.on, ...t?.on },
        }),
        (this.bodyLock = !1),
        this.options.init && this.initPopups();
    }
    initPopups() {
      this.popupLogging("Прокинувся"), this.eventsPopup();
    }
    eventsPopup() {
      document.addEventListener(
        "click",
        function (t) {
          const e = t.target.closest(`[${this.options.attributeOpenButton}]`);
          if (e)
            return (
              t.preventDefault(),
              (this._dataValue = e.getAttribute(
                this.options.attributeOpenButton
              )
                ? e.getAttribute(this.options.attributeOpenButton)
                : "error"),
              (this.youTubeCode = e.getAttribute(this.options.youtubeAttribute)
                ? e.getAttribute(this.options.youtubeAttribute)
                : null),
              "error" !== this._dataValue
                ? (this.isOpen || (this.lastFocusEl = e),
                  (this.targetOpen.selector = `${this._dataValue}`),
                  (this._selectorOpen = !0),
                  void this.open())
                : void this.popupLogging(
                    `Йой, не заповнено атрибут у ${e.classList}`
                  )
            );
          return t.target.closest(`[${this.options.attributeCloseButton}]`) ||
            (!t.target.closest(`.${this.options.classes.popupContent}`) &&
              this.isOpen)
            ? (t.preventDefault(), void this.close())
            : void 0;
        }.bind(this)
      ),
        document.addEventListener(
          "keydown",
          function (t) {
            if (
              this.options.closeEsc &&
              27 == t.which &&
              "Escape" === t.code &&
              this.isOpen
            )
              return t.preventDefault(), void this.close();
            this.options.focusCatch &&
              9 == t.which &&
              this.isOpen &&
              this._focusCatch(t);
          }.bind(this)
        ),
        this.options.hashSettings.goHash &&
          (window.addEventListener(
            "hashchange",
            function () {
              window.location.hash
                ? this._openToHash()
                : this.close(this.targetOpen.selector);
            }.bind(this)
          ),
          window.addEventListener(
            "load",
            function () {
              window.location.hash && this._openToHash();
            }.bind(this)
          ));
    }
    open(t) {
      if (i)
        if (
          ((this.bodyLock = !(
            !document.documentElement.classList.contains("lock") || this.isOpen
          )),
          t &&
            "string" == typeof t &&
            "" !== t.trim() &&
            ((this.targetOpen.selector = t), (this._selectorOpen = !0)),
          this.isOpen && ((this._reopen = !0), this.close()),
          this._selectorOpen ||
            (this.targetOpen.selector = this.lastClosed.selector),
          this._reopen || (this.previousActiveElement = document.activeElement),
          (this.targetOpen.element = document.querySelector(
            this.targetOpen.selector
          )),
          this.targetOpen.element)
        ) {
          if (this.youTubeCode) {
            const t = `https://www.youtube.com/embed/${this.youTubeCode}?rel=0&showinfo=0&autoplay=1`,
              e = document.createElement("iframe");
            e.setAttribute("allowfullscreen", "");
            const s = this.options.setAutoplayYoutube ? "autoplay;" : "";
            if (
              (e.setAttribute("allow", `${s}; encrypted-media`),
              e.setAttribute("src", t),
              !this.targetOpen.element.querySelector(
                `[${this.options.youtubePlaceAttribute}]`
              ))
            ) {
              this.targetOpen.element
                .querySelector(".popup__text")
                .setAttribute(`${this.options.youtubePlaceAttribute}`, "");
            }
            this.targetOpen.element
              .querySelector(`[${this.options.youtubePlaceAttribute}]`)
              .appendChild(e);
          }
          this.options.hashSettings.location &&
            (this._getHash(), this._setHash()),
            this.options.on.beforeOpen(this),
            document.dispatchEvent(
              new CustomEvent("beforePopupOpen", { detail: { popup: this } })
            ),
            this.targetOpen.element.classList.add(
              this.options.classes.popupActive
            ),
            document.documentElement.classList.add(
              this.options.classes.bodyActive
            ),
            this._reopen ? (this._reopen = !1) : !this.bodyLock && n(),
            this.targetOpen.element.setAttribute("aria-hidden", "false"),
            (this.previousOpen.selector = this.targetOpen.selector),
            (this.previousOpen.element = this.targetOpen.element),
            (this._selectorOpen = !1),
            (this.isOpen = !0),
            setTimeout(() => {
              this._focusTrap();
            }, 50),
            this.options.on.afterOpen(this),
            document.dispatchEvent(
              new CustomEvent("afterPopupOpen", { detail: { popup: this } })
            ),
            this.popupLogging("Відкрив попап");
        } else
          this.popupLogging(
            "Йой, такого попапу немає. Перевірте коректність введення. "
          );
    }
    close(t) {
      t &&
        "string" == typeof t &&
        "" !== t.trim() &&
        (this.previousOpen.selector = t),
        this.isOpen &&
          i &&
          (this.options.on.beforeClose(this),
          document.dispatchEvent(
            new CustomEvent("beforePopupClose", { detail: { popup: this } })
          ),
          this.youTubeCode &&
            this.targetOpen.element.querySelector(
              `[${this.options.youtubePlaceAttribute}]`
            ) &&
            (this.targetOpen.element.querySelector(
              `[${this.options.youtubePlaceAttribute}]`
            ).innerHTML = ""),
          this.previousOpen.element.classList.remove(
            this.options.classes.popupActive
          ),
          this.previousOpen.element.setAttribute("aria-hidden", "true"),
          this._reopen ||
            (document.documentElement.classList.remove(
              this.options.classes.bodyActive
            ),
            !this.bodyLock && a(),
            (this.isOpen = !1)),
          this._removeHash(),
          this._selectorOpen &&
            ((this.lastClosed.selector = this.previousOpen.selector),
            (this.lastClosed.element = this.previousOpen.element)),
          this.options.on.afterClose(this),
          document.dispatchEvent(
            new CustomEvent("afterPopupClose", { detail: { popup: this } })
          ),
          setTimeout(() => {
            this._focusTrap();
          }, 50),
          this.popupLogging("Закрив попап"));
    }
    _getHash() {
      this.options.hashSettings.location &&
        (this.hash = this.targetOpen.selector.includes("#")
          ? this.targetOpen.selector
          : this.targetOpen.selector.replace(".", "#"));
    }
    _openToHash() {
      let t = document.querySelector(
        `.${window.location.hash.replace("#", "")}`
      )
        ? `.${window.location.hash.replace("#", "")}`
        : document.querySelector(`${window.location.hash}`)
        ? `${window.location.hash}`
        : null;
      const e = document.querySelector(
        `[${this.options.attributeOpenButton} = "${t}"]`
      )
        ? document.querySelector(
            `[${this.options.attributeOpenButton} = "${t}"]`
          )
        : document.querySelector(
            `[${this.options.attributeOpenButton} = "${t.replace(".", "#")}"]`
          );
      (this.youTubeCode = e.getAttribute(this.options.youtubeAttribute)
        ? e.getAttribute(this.options.youtubeAttribute)
        : null),
        e && t && this.open(t);
    }
    _setHash() {
      history.pushState("", "", this.hash);
    }
    _removeHash() {
      history.pushState("", "", window.location.href.split("#")[0]);
    }
    _focusCatch(t) {
      const e = this.targetOpen.element.querySelectorAll(this._focusEl),
        s = Array.prototype.slice.call(e),
        o = s.indexOf(document.activeElement);
      t.shiftKey && 0 === o && (s[s.length - 1].focus(), t.preventDefault()),
        t.shiftKey || o !== s.length - 1 || (s[0].focus(), t.preventDefault());
    }
    _focusTrap() {
      const t = this.previousOpen.element.querySelectorAll(this._focusEl);
      !this.isOpen && this.lastFocusEl
        ? this.lastFocusEl.focus()
        : t[0].focus();
    }
    popupLogging(t) {
      this.options.logging && l(`[Попапос]: ${t}`);
    }
  })({});
  t.mousePrlx = new (class {
    constructor(t, e = null) {
      if (
        ((this.config = Object.assign({ init: !0, logging: !0 }, t)),
        this.config.init)
      ) {
        const t = document.querySelectorAll("[data-prlx-mouse]");
        t.length
          ? (this.paralaxMouseInit(t),
            this.setLogging(`Прокинувся, стежу за об'єктами: (${t.length})`))
          : this.setLogging("Немає жодного обєкта. Сплю...");
      }
    }
    paralaxMouseInit(t) {
      t.forEach((t) => {
        const e = t.closest("[data-prlx-mouse-wrapper]"),
          s = t.dataset.prlxCx ? +t.dataset.prlxCx : 100,
          o = t.dataset.prlxCy ? +t.dataset.prlxCy : 100,
          i = t.hasAttribute("data-prlx-dxr") ? -1 : 1,
          a = t.hasAttribute("data-prlx-dyr") ? -1 : 1,
          n = t.dataset.prlxA ? +t.dataset.prlxA : 50;
        let r = 0,
          l = 0,
          c = 0,
          h = 0;
        function d(e = window) {
          e.addEventListener("mousemove", function (e) {
            const s = t.getBoundingClientRect().top + window.scrollY;
            if (s >= window.scrollY || s + t.offsetHeight >= window.scrollY) {
              const t = window.innerWidth,
                s = window.innerHeight,
                o = e.clientX - t / 2,
                i = e.clientY - s / 2;
              (c = (o / t) * 100), (h = (i / s) * 100);
            }
          });
        }
        !(function e() {
          (r += ((c - r) * n) / 1e3),
            (l += ((h - l) * n) / 1e3),
            (t.style.cssText = `transform: translate3D(${(i * r) / (s / 10)}%,${
              (a * l) / (o / 10)
            }%,0) rotate(0.02deg);`),
            requestAnimationFrame(e);
        })(),
          e ? d(e) : d();
      });
    }
    setLogging(t) {
      this.config.logging && l(`[PRLX Mouse]: ${t}`);
    }
  })({});
  let d = (t, e = !1, s = 500, o = 0) => {
    const i = document.querySelector(t);
    if (i) {
      let a = "",
        n = 0;
      if (e) {
        a = "header.header";
        const t = document.querySelector(a);
        t.classList.contains("_header-scroll")
          ? (n = t.offsetHeight)
          : ((t.style.cssText = "transition-duration: 0s;"),
            t.classList.add("_header-scroll"),
            (n = t.offsetHeight),
            t.classList.remove("_header-scroll"),
            setTimeout(() => {
              t.style.cssText = "";
            }, 0));
      }
      let c = {
        speedAsDuration: !0,
        speed: s,
        header: a,
        offset: o,
        easing: "easeOutQuad",
      };
      if (
        (document.documentElement.classList.contains("menu-open") && r(),
        "undefined" != typeof SmoothScroll)
      )
        new SmoothScroll().animateScroll(i, "", c);
      else {
        let t = i.getBoundingClientRect().top + scrollY;
        (t = n ? t - n : t),
          (t = o ? t - o : t),
          window.scrollTo({ top: t, behavior: "smooth" });
      }
      l(`[gotoBlock]: Юхуу...їдемо до ${t}`);
    } else l(`[gotoBlock]: Йой... Такого блоку немає на сторінці: ${t}`);
  };
  t.watcher = new (class {
    constructor(t) {
      (this.config = Object.assign({ logging: !0 }, t)),
        this.observer,
        !document.documentElement.classList.contains("watcher") &&
          this.scrollWatcherRun();
    }
    scrollWatcherUpdate() {
      this.scrollWatcherRun();
    }
    scrollWatcherRun() {
      document.documentElement.classList.add("watcher"),
        this.scrollWatcherConstructor(
          document.querySelectorAll("[data-watch]")
        );
    }
    scrollWatcherConstructor(t) {
      if (t.length) {
        this.scrollWatcherLogging(
          `Прокинувся, стежу за об'єктами (${t.length})...`
        ),
          c(
            Array.from(t).map(function (t) {
              if (
                "navigator" === t.dataset.watch &&
                !t.dataset.watchThreshold
              ) {
                let e;
                t.clientHeight > 2
                  ? ((e = window.innerHeight / 2 / (t.clientHeight - 1)),
                    e > 1 && (e = 1))
                  : (e = 1),
                  t.setAttribute("data-watch-threshold", e.toFixed(2));
              }
              return `${
                t.dataset.watchRoot ? t.dataset.watchRoot : null
              }|${t.dataset.watchMargin ? t.dataset.watchMargin : "0px"}|${t.dataset.watchThreshold ? t.dataset.watchThreshold : 0}`;
            })
          ).forEach((e) => {
            let s = e.split("|"),
              o = { root: s[0], margin: s[1], threshold: s[2] },
              i = Array.from(t).filter(function (t) {
                let e = t.dataset.watchRoot ? t.dataset.watchRoot : null,
                  s = t.dataset.watchMargin ? t.dataset.watchMargin : "0px",
                  i = t.dataset.watchThreshold ? t.dataset.watchThreshold : 0;
                if (
                  String(e) === o.root &&
                  String(s) === o.margin &&
                  String(i) === o.threshold
                )
                  return t;
              }),
              a = this.getScrollWatcherConfig(o);
            this.scrollWatcherInit(i, a);
          });
      } else
        this.scrollWatcherLogging("Сплю, немає об'єктів для стеження. ZzzZZzz");
    }
    getScrollWatcherConfig(t) {
      let e = {};
      if (
        (document.querySelector(t.root)
          ? (e.root = document.querySelector(t.root))
          : "null" !== t.root &&
            this.scrollWatcherLogging(
              `Эмм... батьківського об'єкта ${t.root} немає на сторінці`
            ),
        (e.rootMargin = t.margin),
        !(t.margin.indexOf("px") < 0 && t.margin.indexOf("%") < 0))
      ) {
        if ("prx" === t.threshold) {
          t.threshold = [];
          for (let e = 0; e <= 1; e += 0.005) t.threshold.push(e);
        } else t.threshold = t.threshold.split(",");
        return (e.threshold = t.threshold), e;
      }
      this.scrollWatcherLogging(
        "йой, налаштування data-watch-margin потрібно задавати в PX або %"
      );
    }
    scrollWatcherCreate(t) {
      console.log(t),
        (this.observer = new IntersectionObserver((t, e) => {
          t.forEach((t) => {
            this.scrollWatcherCallback(t, e);
          });
        }, t));
    }
    scrollWatcherInit(t, e) {
      this.scrollWatcherCreate(e), t.forEach((t) => this.observer.observe(t));
    }
    scrollWatcherIntersecting(t, e) {
      t.isIntersecting
        ? (!e.classList.contains("_watcher-view") &&
            e.classList.add("_watcher-view"),
          this.scrollWatcherLogging(
            `Я бачу ${e.classList}, додав клас _watcher-view`
          ))
        : (e.classList.contains("_watcher-view") &&
            e.classList.remove("_watcher-view"),
          this.scrollWatcherLogging(
            `Я не бачу ${e.classList}, прибрав клас _watcher-view`
          ));
    }
    scrollWatcherOff(t, e) {
      e.unobserve(t),
        this.scrollWatcherLogging(`Я перестав стежити за ${t.classList}`);
    }
    scrollWatcherLogging(t) {
      this.config.logging && l(`[Спостерігач]: ${t}`);
    }
    scrollWatcherCallback(t, e) {
      const s = t.target;
      this.scrollWatcherIntersecting(t, s),
        s.hasAttribute("data-watch-once") &&
          t.isIntersecting &&
          this.scrollWatcherOff(s, e),
        document.dispatchEvent(
          new CustomEvent("watcherCallback", { detail: { entry: t } })
        );
    }
  })({});
  class u {
    constructor(t) {
      t.length &&
        (this.elements = Array.from(t).map((t) => new u.Each(t, this.options)));
    }
    destroyEvents() {
      this.elements.forEach((t) => {
        t.destroyEvents();
      });
    }
    setEvents() {
      this.elements.forEach((t) => {
        t.setEvents();
      });
    }
  }
  (u.Each = class {
    constructor(t) {
      (this.parent = t),
        (this.elements = this.parent.querySelectorAll("[data-prlx]")),
        (this.animation = this.animationFrame.bind(this)),
        (this.offset = 0),
        (this.value = 0),
        (this.smooth = t.dataset.prlxSmooth
          ? Number(t.dataset.prlxSmooth)
          : 15),
        this.setEvents();
    }
    setEvents() {
      this.animationID = window.requestAnimationFrame(this.animation);
    }
    destroyEvents() {
      window.cancelAnimationFrame(this.animationID);
    }
    animationFrame() {
      const t = this.parent.getBoundingClientRect().top,
        e = this.parent.offsetHeight,
        s = window.innerHeight,
        o = t - s,
        i = t + e,
        a = this.parent.dataset.prlxCenter
          ? this.parent.dataset.prlxCenter
          : "center";
      if (o < 30 && i > -30)
        switch (a) {
          case "top":
            this.offset = -1 * t;
            break;
          case "center":
            this.offset = s / 2 - (t + e / 2);
            break;
          case "bottom":
            this.offset = s - (t + e);
        }
      (this.value += (this.offset - this.value) / this.smooth),
        (this.animationID = window.requestAnimationFrame(this.animation)),
        this.elements.forEach((t) => {
          const e = {
            axis: t.dataset.axis ? t.dataset.axis : "v",
            direction: t.dataset.direction ? t.dataset.direction + "1" : "-1",
            coefficient: t.dataset.coefficient
              ? Number(t.dataset.coefficient)
              : 5,
            additionalProperties: t.dataset.properties
              ? t.dataset.properties
              : "",
          };
          this.parameters(t, e);
        });
    }
    parameters(t, e) {
      "v" == e.axis
        ? (t.style.transform = `translate3D(0, ${(
            e.direction *
            (this.value / e.coefficient)
          ).toFixed(2)}px,0) ${e.additionalProperties}`)
        : "h" == e.axis &&
          (t.style.transform = `translate3D(${(
            e.direction *
            (this.value / e.coefficient)
          ).toFixed(2)}px,0,0) ${e.additionalProperties}`);
    }
  }),
    document.querySelectorAll("[data-prlx-parent]") &&
      (t.parallax = new u(document.querySelectorAll("[data-prlx-parent]")));
  let p = !1;
  setTimeout(() => {
    if (p) {
      let t = new Event("windowScroll");
      window.addEventListener("scroll", function (e) {
        document.dispatchEvent(t);
      });
    }
  }, 0);
  async function m() {
    try {
      const t = "3D5SqperZ5DDpdHw1edRyFav2w2AfVNrRpCgzYVTpump";
      await navigator.clipboard.writeText(t),
        alert("Address copied successfully");
    } catch (t) {
      console.error(t.message);
    }
  }
  new (class {
    constructor(t) {
      this.type = t;
    }
    init() {
      (this.оbjects = []),
        (this.daClassname = "_dynamic_adapt_"),
        (this.nodes = [...document.querySelectorAll("[data-da]")]),
        this.nodes.forEach((t) => {
          const e = t.dataset.da.trim().split(","),
            s = {};
          (s.element = t),
            (s.parent = t.parentNode),
            (s.destination = document.querySelector(`${e[0].trim()}`)),
            (s.breakpoint = e[1] ? e[1].trim() : "767"),
            (s.place = e[2] ? e[2].trim() : "last"),
            (s.index = this.indexInParent(s.parent, s.element)),
            this.оbjects.push(s);
        }),
        this.arraySort(this.оbjects),
        (this.mediaQueries = this.оbjects
          .map(({ breakpoint: t }) => `(${this.type}-width: ${t}px),${t}`)
          .filter((t, e, s) => s.indexOf(t) === e)),
        this.mediaQueries.forEach((t) => {
          const e = t.split(","),
            s = window.matchMedia(e[0]),
            o = e[1],
            i = this.оbjects.filter(({ breakpoint: t }) => t === o);
          s.addEventListener("change", () => {
            this.mediaHandler(s, i);
          }),
            this.mediaHandler(s, i);
        });
    }
    mediaHandler(t, e) {
      t.matches
        ? e.forEach((t) => {
            this.moveTo(t.place, t.element, t.destination);
          })
        : e.forEach(({ parent: t, element: e, index: s }) => {
            e.classList.contains(this.daClassname) && this.moveBack(t, e, s);
          });
    }
    moveTo(t, e, s) {
      e.classList.add(this.daClassname),
        "last" === t || t >= s.children.length
          ? s.append(e)
          : "first" !== t
          ? s.children[t].before(e)
          : s.prepend(e);
    }
    moveBack(t, e, s) {
      e.classList.remove(this.daClassname),
        void 0 !== t.children[s] ? t.children[s].before(e) : t.append(e);
    }
    indexInParent(t, e) {
      return [...t.children].indexOf(e);
    }
    arraySort(t) {
      "min" === this.type
        ? t.sort((t, e) =>
            t.breakpoint === e.breakpoint
              ? t.place === e.place
                ? 0
                : "first" === t.place || "last" === e.place
                ? -1
                : "last" === t.place || "first" === e.place
                ? 1
                : 0
              : t.breakpoint - e.breakpoint
          )
        : t.sort((t, e) =>
            t.breakpoint === e.breakpoint
              ? t.place === e.place
                ? 0
                : "first" === t.place || "last" === e.place
                ? 1
                : "last" === t.place || "first" === e.place
                ? -1
                : 0
              : e.breakpoint - t.breakpoint
          );
    }
  })("max").init();
  document.querySelectorAll(".copy-ca-btn").forEach((t) => {
    t.onclick = m;
  });
  const g = document.querySelector(".roadmap__bg"),
    f = document.querySelector(".how__bg"),
    y = document.querySelector(".page__how"),
    b = document.querySelector(".page__who"),
    w = g.clientHeight,
    v = f.clientHeight,
    L = document.querySelectorAll(".roadmap__layer"),
    _ = document.querySelectorAll(".how__layer");
  let E, S;
  (window.onscroll = () => {
    !(function () {
      if (
        g.getBoundingClientRect().y <= 0 &&
        y.getBoundingClientRect().y + y.clientHeight - 60 < 0
      ) {
        E || (E = window.scrollY), (g.style.position = "fixed");
        let t = ((window.scrollY - E) / (w - window.innerHeight)) * 100;
        const e = (window.innerWidth - window.innerHeight) / window.innerHeight;
        t > 100 && (t = 100),
          t < 0 && (t = 0),
          t < 100 &&
            L.forEach((s) => {
              (L[0].style.transform = `translate(0, -${t * e * 0.1}vh)`),
                (L[1].style.transform = `translate(0, -${t * e * 0.2}vh)`),
                (L[2].style.transform = `translate(0, -${t * e * 0.4}vh)`),
                (L[3].style.transform = `translate(0, -${t * e * 0.7}vh)`),
                (L[4].style.transform = `translate(0, -${t * e * 1}vh)`);
            });
      } else
        y.getBoundingClientRect().y + y.clientHeight - 60 >= 0 &&
          (g.style.position = "absolute");
    })(),
      (function () {
        if (
          f.getBoundingClientRect().y <= 0 &&
          b.getBoundingClientRect().y + b.clientHeight < 0
        ) {
          S || (S = window.scrollY),
            (f.style.position = "fixed"),
            (f.style.top = "-200px");
          let t = ((window.scrollY - S) / (v - window.innerHeight)) * 100;
          const e =
            (window.innerWidth - window.innerHeight) / window.innerHeight;
          t > 100 && (t = 100),
            t < 0 && (t = 0),
            t < 90 &&
              _.forEach((s) => {
                (_[0].style.transform = `translate(0, -${t * e * 0.05}vh)`),
                  (_[1].style.transform = `translate(0, -${t * e * 0.2}vh)`),
                  (_[2].style.transform = `translate(0, -${t * e * 0.4}vh)`),
                  (_[3].style.transform = `translate(0, -${t * e * 0.6}vh)`),
                  (_[4].style.transform = `translate(0, -${t * e * 0.8}vh)`),
                  (_[5].style.transform = `translate(0, -${t * e * 1}vh)`);
              });
        } else
          b.getBoundingClientRect().y + b.clientHeight >= 0 &&
            ((f.style.position = "absolute"),
            (f.style.top = "0"),
            _.forEach((t) => {
              (_[0].style.transform = "translate(0, 0)"),
                (_[1].style.transform = "translate(0, 0)"),
                (_[2].style.transform = "translate(0, 0)"),
                (_[3].style.transform = "translate(0, 0)"),
                (_[4].style.transform = "translate(0, 0)"),
                (_[5].style.transform = "translate(0, 0)");
            }));
      })();
  }),
    (window.FLS = !1),
    document.documentElement.classList.contains("loading") ||
      window.addEventListener("load", function () {
        setTimeout(function () {
          document.documentElement.classList.add("loaded");
        }, 0);
      }),
    document.querySelector(".icon-menu") &&
      document.addEventListener("click", function (t) {
        i &&
          t.target.closest(".icon-menu") &&
          (((t = 500) => {
            document.documentElement.classList.contains("lock") ? a(t) : n(t);
          })(),
          document.documentElement.classList.toggle("menu-open"));
      }),
    (function () {
      const t = document.querySelectorAll("[data-tabs]");
      let i = [];
      if (t.length > 0) {
        const s = e();
        s && s.startsWith("tab-") && (i = s.replace("tab-", "").split("-")),
          t.forEach((t, e) => {
            t.classList.add("_tab-init"),
              t.setAttribute("data-tabs-index", e),
              t.addEventListener("click", r),
              (function (t) {
                let e = t.querySelectorAll("[data-tabs-titles]>*"),
                  s = t.querySelectorAll("[data-tabs-body]>*");
                const o = t.dataset.tabsIndex,
                  a = i[0] == o;
                if (a) {
                  const e = t.querySelector("[data-tabs-titles]>._tab-active");
                  e && e.classList.remove("_tab-active");
                }
                s.length &&
                  s.forEach((t, s) => {
                    e[s].setAttribute("data-tabs-title", ""),
                      t.setAttribute("data-tabs-item", ""),
                      a && s == i[1] && e[s].classList.add("_tab-active"),
                      (t.hidden = !e[s].classList.contains("_tab-active"));
                  });
              })(t);
          });
        let o = h(t, "tabs");
        o &&
          o.length &&
          o.forEach((t) => {
            t.matchMedia.addEventListener("change", function () {
              a(t.itemsArray, t.matchMedia);
            }),
              a(t.itemsArray, t.matchMedia);
          });
      }
      function a(t, e) {
        t.forEach((t) => {
          let s = (t = t.item).querySelector("[data-tabs-titles]"),
            o = t.querySelectorAll("[data-tabs-title]"),
            i = t.querySelector("[data-tabs-body]"),
            a = t.querySelectorAll("[data-tabs-item]");
          (o = Array.from(o).filter((e) => e.closest("[data-tabs]") === t)),
            (a = Array.from(a).filter((e) => e.closest("[data-tabs]") === t)),
            a.forEach((a, n) => {
              e.matches
                ? (i.append(o[n]), i.append(a), t.classList.add("_tab-spoller"))
                : (s.append(o[n]), t.classList.remove("_tab-spoller"));
            });
        });
      }
      function n(t) {
        let e = t.querySelectorAll("[data-tabs-title]"),
          i = t.querySelectorAll("[data-tabs-item]");
        const a = t.dataset.tabsIndex;
        const n = (function (t) {
          if (t.hasAttribute("data-tabs-animate"))
            return t.dataset.tabsAnimate > 0
              ? Number(t.dataset.tabsAnimate)
              : 500;
        })(t);
        if (i.length > 0) {
          const r = t.hasAttribute("data-tabs-hash");
          (i = Array.from(i).filter((e) => e.closest("[data-tabs]") === t)),
            (e = Array.from(e).filter((e) => e.closest("[data-tabs]") === t)),
            i.forEach((t, i) => {
              var l;
              e[i].classList.contains("_tab-active")
                ? (n ? o(t, n) : (t.hidden = !1),
                  r &&
                    !t.closest(".popup") &&
                    ((l = (l = `tab-${a}-${i}`)
                      ? `#${l}`
                      : window.location.href.split("#")[0]),
                    history.pushState("", "", l)))
                : n
                ? s(t, n)
                : (t.hidden = !0);
            });
        }
      }
      function r(t) {
        const e = t.target;
        if (e.closest("[data-tabs-title]")) {
          const s = e.closest("[data-tabs-title]"),
            o = s.closest("[data-tabs]");
          if (
            !s.classList.contains("_tab-active") &&
            !o.querySelector("._slide")
          ) {
            let t = o.querySelectorAll("[data-tabs-title]._tab-active");
            t.length &&
              (t = Array.from(t).filter((t) => t.closest("[data-tabs]") === o)),
              t.length && t[0].classList.remove("_tab-active"),
              s.classList.add("_tab-active"),
              n(o);
          }
          t.preventDefault();
        }
      }
    })(),
    (function () {
      function s(e) {
        if ("click" === e.type) {
          const s = e.target;
          if (s.closest("[data-goto]")) {
            const o = s.closest("[data-goto]"),
              i = o.dataset.goto ? o.dataset.goto : "",
              a = !!o.hasAttribute("data-goto-header"),
              n = o.dataset.gotoSpeed ? o.dataset.gotoSpeed : 500,
              l = o.dataset.gotoTop ? parseInt(o.dataset.gotoTop) : 0;
            if (t.fullpage) {
              const e = document
                  .querySelector(`${i}`)
                  .closest("[data-fp-section]"),
                s = e ? +e.dataset.fpId : null;
              null !== s &&
                (t.fullpage.switchingSection(s),
                document.documentElement.classList.contains("menu-open") &&
                  r());
            } else d(i, a, n, l);
            e.preventDefault();
          }
        } else if ("watcherCallback" === e.type && e.detail) {
          const t = e.detail.entry,
            s = t.target;
          if ("navigator" === s.dataset.watch) {
            document.querySelector("[data-goto]._navigator-active");
            let e;
            if (s.id && document.querySelector(`[data-goto="#${s.id}"]`))
              e = document.querySelector(`[data-goto="#${s.id}"]`);
            else if (s.classList.length)
              for (let t = 0; t < s.classList.length; t++) {
                const o = s.classList[t];
                if (document.querySelector(`[data-goto=".${o}"]`)) {
                  e = document.querySelector(`[data-goto=".${o}"]`);
                  break;
                }
              }
            t.isIntersecting
              ? e && e.classList.add("_navigator-active")
              : e && e.classList.remove("_navigator-active");
          }
        }
      }
      if (
        (document.addEventListener("click", s),
        document.addEventListener("watcherCallback", s),
        e())
      ) {
        let t;
        document.querySelector(`#${e()}`)
          ? (t = `#${e()}`)
          : document.querySelector(`.${e()}`) && (t = `.${e()}`),
          t && d(t, !0, 500, 20);
      }
    })(),
    (function () {
      p = !0;
      const t = document.querySelector("header.header"),
        e = t.hasAttribute("data-scroll-show"),
        s = t.dataset.scrollShow ? t.dataset.scrollShow : 500,
        o = t.dataset.scroll ? t.dataset.scroll : 1;
      let i,
        a = 0;
      document.addEventListener("windowScroll", function (n) {
        const r = window.scrollY;
        clearTimeout(i),
          r >= o
            ? (!t.classList.contains("_header-scroll") &&
                t.classList.add("_header-scroll"),
              e &&
                (r > a
                  ? t.classList.contains("_header-show") &&
                    t.classList.remove("_header-show")
                  : !t.classList.contains("_header-show") &&
                    t.classList.add("_header-show"),
                (i = setTimeout(() => {
                  !t.classList.contains("_header-show") &&
                    t.classList.add("_header-show");
                }, s))))
            : (t.classList.contains("_header-scroll") &&
                t.classList.remove("_header-scroll"),
              e &&
                t.classList.contains("_header-show") &&
                t.classList.remove("_header-show")),
          (a = r <= 0 ? 0 : r);
      });
    })();
})();
